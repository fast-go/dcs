// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	order "dcs/api/frontend/internal/handler/order"
	product "dcs/api/frontend/internal/handler/product"
	search "dcs/api/frontend/internal/handler/search"
	user "dcs/api/frontend/internal/handler/user"
	"dcs/api/frontend/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/base/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/base/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/base/logout",
				Handler: user.LogoutHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/get_info",
				Handler: user.UserinfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/search/do",
				Handler: search.SearchHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/search/ping",
				Handler: search.PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/product/get_detail",
				Handler: product.ProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/product/find_page",
				Handler: product.FindPageHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PeriodLimitMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/order/create",
					Handler: order.OrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
