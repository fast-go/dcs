// Code generated by goctl. DO NOT EDIT.
// Source: producer.proto

package producerclient

import (
	"context"

	"dcs/rpc/producer/producer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request  = producer.Request
	Response = producer.Response

	Producer interface {
		Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	}

	defaultProducer struct {
		cli zrpc.Client
	}
)

func NewProducer(cli zrpc.Client) Producer {
	return &defaultProducer{
		cli: cli,
	}
}

func (m *defaultProducer) Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := producer.NewProducerClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}
